{"ast":null,"code":"import _defineProperty from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/src/addEventModal.js\";\n//////////////////////////////////////////\n//\n//  this is the module for the modal classes\n//  Reminder icon and Add event icon here\n//\n//\n///////////////////////////////////////////\nimport React, { Component } from 'react';\nimport Modal from 'react-awesome-modal';\nimport addIcon from \"./icon-add.svg\";\nimport reminderIcon from \"./icon-reminder.svg\"; //Modal for setting a reminder\n\nexport var SetReminderModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SetReminderModal, _Component);\n\n  function SetReminderModal(props) {\n    var _this;\n\n    _classCallCheck(this, SetReminderModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SetReminderModal).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      var target = event.target;\n      var value = event.target.value;\n      var _name = target.name;\n\n      _this.setState(_defineProperty({}, _name, value));\n    };\n\n    _this.state = {\n      visible: false,\n      time: '',\n      taskName: 'nothing'\n    };\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setReminder = _this.setReminder.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SetReminderModal, [{\n    key: \"openModal\",\n    value: function openModal() {\n      this.setState({\n        visible: true\n      });\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        visible: false\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      this.setReminder();\n      this.closeModal();\n    }\n  }, {\n    key: \"setReminder\",\n    value: function setReminder() {\n      var time = this.state.time;\n      var countDownDate = new Date(time).getTime();\n      console.log(\"time is: \".concat(time, \" and countDown is: \").concat(countDownDate)); // Update the count down every 1 second\n\n      var x = setInterval(function () {\n        var now = new Date().getTime(); // Find the distance between now and the count down date\n\n        var distance = countDownDate - now;\n        if (distance <= 0) alert(\"Please enter a future time\");\n        var data = {\n          name: this.props.taskName,\n          email: this.props.email\n        };\n\n        if (distance < 0) {\n          clearInterval(x);\n          console.log(\"time is up...sending email\"); //Sending the email out\n\n          fetch('/api/email', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return console.log(res);\n          }).catch(function (err) {\n            return console.log(err);\n          });\n        }\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        id: \"reminderIcon\",\n        className: \"icons\",\n        src: reminderIcon,\n        alt: 'reminder icon',\n        onClick: function onClick() {\n          return _this2.openModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        visible: this.state.visible,\n        width: \"500\",\n        height: \"450\",\n        effect: \"fadeInUp\",\n        onClickAway: function onClickAway() {\n          return _this2.closeModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Add Reminder\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Title\"), \" \", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.taskName,\n        name: \"taskName\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Reminder Time\"), React.createElement(\"input\", {\n        type: \"datetime-local\",\n        value: this.state.time,\n        name: \"time\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \" Submit \"))));\n    }\n  }]);\n\n  return SetReminderModal;\n}(Component); //Modal for adding an event\n\nexport var AddEventModal =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(AddEventModal, _Component2);\n\n  function AddEventModal(props) {\n    var _this3;\n\n    _classCallCheck(this, AddEventModal);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AddEventModal).call(this, props));\n\n    _this3.handleInputChange = function (event) {\n      var target = event.target;\n      var value = event.target.value;\n      var _name = target.name;\n\n      _this3.setState(_defineProperty({}, _name, value));\n    };\n\n    _this3.handleSubmit = function (event) {\n      event.preventDefault(); //error check for empty fields -- they must all be filled out\n\n      var lengthOfEvent = Math.abs(new Date(_this3.state.endDate).getTime() - new Date(_this3.state.startDate).getTime()) / 3600000;\n      if (lengthOfEvent <= 0) return;\n      if (_this3.state.eventName === \"\") return;\n      if (_this3.isValidDate(new Date(_this3.state.startDate)) === false) return;\n      if (_this3.isValidDate(new Date(_this3.state.endDate)) === false) return; //passed all of the checks\n\n      var data = {\n        event_name: _this3.state.eventName,\n        event_start_time: _this3.state.startDate.replace('T', ' '),\n        event_end_time: _this3.state.endDate.replace('T', ' '),\n        event_urgency: _this3.state.urg,\n        event_length: lengthOfEvent\n      };\n      console.table(data); //add it into the DB\n\n      fetch('/api/add-appointment', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        // data can be `string` or {object}!\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (res.status === 'success') {\n          fetch('/api/display-events-for-user').then(function (res) {\n            return res.json();\n          }).then(function (res) {\n            return _this3.props.onAddEvent(res.data, res.todaysEvents);\n          }) //send back the updated event list\n          .catch(function (e) {\n            return console.log(e);\n          });\n        } else {\n          console.log(\"error updating data in DB\");\n        }\n      }).catch(function (e) {\n        return console.log(e);\n      });\n\n      _this3.closeModal();\n\n      window.location.reload(); //force page to reload\n    };\n\n    _this3.state = {\n      visible: false,\n      eventName: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      id: [],\n      urg: 0,\n      eventList: []\n    };\n    _this3.handleInputChange = _this3.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.handleSubmit = _this3.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.isValidDate = _this3.isValidDate.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.closeModal = _this3.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  }\n\n  _createClass(AddEventModal, [{\n    key: \"openModal\",\n    value: function openModal() {\n      this.setState({\n        visible: true\n      });\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        visible: false\n      });\n    } //make the inputs not read only\n\n  }, {\n    key: \"isValidDate\",\n    value: function isValidDate(d) {\n      return d instanceof Date && !isNaN(d);\n    } //add a new event into the DB\n    //first we check that the user input was valid\n    //then we turn the strings into something the DB can read\n    //sending the data object after turning it into JSON\n\n  }, {\n    key: \"renderAddForm\",\n    value: function renderAddForm() {\n      return React.createElement(\"div\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Title\"), \" \", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"eventName\",\n        value: this.state.eventName,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Start\"), \" \", React.createElement(\"input\", {\n        type: \"datetime-local\",\n        name: \"startDate\",\n        value: this.state.startDate,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"End\"), \" \", React.createElement(\"input\", {\n        type: \"datetime-local\",\n        name: \"endDate\",\n        value: this.state.endDate,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Urgency\"), \" \", React.createElement(\"input\", {\n        type: \"number\",\n        name: \"urg\",\n        min: \"0\",\n        max: \"10\",\n        value: this.state.urg,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        value: \" Add New Event\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Add Event\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        id: \"addIcon\",\n        className: \"icons\",\n        src: addIcon,\n        alt: 'add event icon',\n        onClick: function onClick() {\n          return _this4.openModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        visible: this.state.visible,\n        width: \"500\",\n        height: \"550\",\n        effect: \"fadeInUp\",\n        onClickAway: function onClickAway() {\n          return _this4.closeModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Add Event\"), this.renderAddForm())));\n    }\n  }]);\n\n  return AddEventModal;\n}(Component);","map":{"version":3,"sources":["/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/src/addEventModal.js"],"names":["React","Component","Modal","SetReminderModal","props","handleInputChange","event","target","value","_name","name","setState","state","visible","time","taskName","bind","setReminder","handleSubmit","preventDefault","closeModal","countDownDate","Date","getTime","console","log","x","setInterval","now","distance","alert","data","email","clearInterval","fetch","method","body","JSON","stringify","headers","then","res","catch","err","reminderIcon","openModal","AddEventModal","lengthOfEvent","Math","abs","endDate","startDate","eventName","isValidDate","event_name","event_start_time","replace","event_end_time","event_urgency","urg","event_length","table","json","status","onAddEvent","todaysEvents","e","window","location","reload","id","eventList","d","isNaN","addIcon","renderAddForm"],"mappings":"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","sourcesContent":["//////////////////////////////////////////\n//\n//  this is the module for the modal classes\n//  Reminder icon and Add event icon here\n//\n//\n///////////////////////////////////////////\n\nimport React, {Component} from 'react'\nimport Modal from 'react-awesome-modal';\nimport addIcon from './icon-add.svg';\nimport reminderIcon from './icon-reminder.svg';\n\n//Modal for setting a reminder\n\nexport class SetReminderModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            time : '',\n            taskName :  'nothing'\n        }\n    this.handleInputChange = this.handleInputChange.bind(this);  \n    this.setReminder = this.setReminder.bind(this);  \n    this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    openModal() {\n        this.setState({\n            visible: true\n        });\n    }\n    closeModal() {\n        this.setState({\n            visible: false\n        });\n    }\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = event.target.value;\n        const _name = target.name;\n        this.setState({ [_name]: value });\n    }\n    handleSubmit(event){\n        event.preventDefault();\n        this.setReminder();\n        this.closeModal();\n    }\n    setReminder(){\n        var time = this.state.time;\n        var countDownDate = new Date(time).getTime();\n        console.log(`time is: ${time} and countDown is: ${countDownDate}`);\n\n        // Update the count down every 1 second\n        var x = setInterval(function() {\n        var now = new Date().getTime();\n        // Find the distance between now and the count down date\n        var distance = countDownDate - now;\n        if(distance <= 0) alert(\"Please enter a future time\");\n        var data = {\n            name: this.props.taskName,\n            email: this.props.email\n        }\n        if (distance < 0) {\n            clearInterval(x);\n            console.log(\"time is up...sending email\");\n            //Sending the email out\n            fetch('/api/email', {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers:{\n                  'Content-Type': 'application/json'\n                }\n            })\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n        }\n        }, 1000);\n    }\n\n    render() {\n        return (\n            <section>\n                <img id = 'reminderIcon' className = \"icons\" src={reminderIcon} alt={'reminder icon'} onClick={() => this.openModal()}></img>\n                <Modal\n                    visible={this.state.visible}\n                    width=\"500\"\n                    height=\"450\"\n                    effect=\"fadeInUp\"\n                    onClickAway={() => this.closeModal()}\n                >\n                    <div className=\"form\">\n                        <h2>Add Reminder</h2>\n                        <span>Title</span> <input type=\"text\" value = {this.state.taskName} name= \"taskName\" onChange = {this.handleInputChange}/>\n                        <span>Reminder Time</span><input type=\"datetime-local\" value = {this.state.time} name= \"time\" onChange = {this.handleInputChange}/>\n                        <button type= \"button\" onClick = {this.handleSubmit}> Submit </button>\n                    </div>\n                </Modal>\n            </section>\n        )\n    }\n}\n\n\n\n//Modal for adding an event\nexport class AddEventModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            eventName: \"\",\n            startDate: \"\",\n            endDate: \"\",\n            id:[],\n            urg : 0,\n            eventList :[]\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.isValidDate = this.isValidDate.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n    openModal() {\n        this.setState({\n            visible: true\n        });\n    }\n    closeModal() {\n        this.setState({\n            visible: false\n        });\n    }\n    //make the inputs not read only\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = event.target.value;\n        const _name = target.name;\n        this.setState({ [_name]: value });\n    }\n\n    isValidDate(d) {\n        return d instanceof Date && !isNaN(d);\n    }\n\n    //add a new event into the DB\n    //first we check that the user input was valid\n    //then we turn the strings into something the DB can read\n    //sending the data object after turning it into JSON\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //error check for empty fields -- they must all be filled out\n        var lengthOfEvent = Math.abs(new Date(this.state.endDate).getTime() - new Date(this.state.startDate).getTime())/3600000;\n        if(lengthOfEvent <= 0) return; \n        if (this.state.eventName === \"\") return;\n        if (this.isValidDate(new Date(this.state.startDate)) === false) return;\n        if(this.isValidDate(new Date(this.state.endDate)) === false) return;\n        //passed all of the checks\n        var data = {\n            event_name: this.state.eventName,\n            event_start_time: this.state.startDate.replace('T',' '),\n            event_end_time: this.state.endDate.replace('T',' '),\n            event_urgency:this.state.urg,\n            event_length: lengthOfEvent\n        }\n        console.table(data);\n        //add it into the DB\n        fetch('/api/add-appointment', {\n            method: 'POST', \n            body: JSON.stringify(data), // data can be `string` or {object}!\n            headers:{\n              'Content-Type': 'application/json'\n            }})\n            .then(res => res.json())\n            .then(res => {\n                if(res.status === 'success'){\n                    fetch('/api/display-events-for-user')\n                    .then(res => res.json())\n                    .then(res => this.props.onAddEvent(res.data, res.todaysEvents)) //send back the updated event list\n                    .catch(e => console.log(e));\n                }\n                else{\n                    console.log(\"error updating data in DB\");\n                }\n            })\n            .catch(e => console.log(e));\n\n        this.closeModal();\n        window.location.reload(); //force page to reload\n    }\n\n\n\n    renderAddForm() {\n        return (\n            <div className=\"form\">\n                <span>Title</span> <input type=\"text\" name=\"eventName\" value={this.state.eventName} onChange={this.handleInputChange} />\n                <span>Start</span> <input type=\"datetime-local\" name=\"startDate\" value={this.state.startDate} onChange={this.handleInputChange} />\n                <span>End</span> <input type=\"datetime-local\" name=\"endDate\" value={this.state.endDate} onChange={this.handleInputChange} />\n                <span>Urgency</span> <input type=\"number\" name=\"urg\" min = \"0\" max = \"10\" value={this.state.urg} onChange={this.handleInputChange} />\n                <button type=\"button\" value=\" Add New Event\" onClick={this.handleSubmit}>Add Event</button>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <section>\n                <img id = 'addIcon' className = \"icons\" src={addIcon} alt={'add event icon'} onClick={() => this.openModal()}></img>\n                <Modal\n                    visible={this.state.visible}\n                    width=\"500\"\n                    height=\"550\"\n                    effect=\"fadeInUp\"\n                    onClickAway={() => this.closeModal()}\n                >\n                    <div className=\"form\">\n                        <h2>Add Event</h2>\n                        {this.renderAddForm()}\n                    </div>\n                </Modal>\n            </section>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}