{"ast":null,"code":"import _classCallCheck from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/src/calendar.js\";\n///////////////////////////////////////////////\n//\n//  This is the main component that renders all of the others\n//  has the calendar in it\n//  weather and today's events are children\n//\n//\n///////////////////////////////////////////////// \nimport React, { Component } from 'react';\nimport './index.css';\nimport './dark.css'; //use big calendar react package and custom CSS file\n\nimport BigCalendar from 'react-big-calendar';\nimport moment from 'moment';\nimport './react-big-calendar.css'; //import the pop up modals\n\nimport MyModal from './popUpModal';\nimport { AddEventModal, SetReminderModal } from './addEventModal'; //import todays events\n\nimport DayEvents from './todayEvents'; //import the progress module\n\nimport WeatherModule from './weatherModule'; // Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\n\nmoment.locale('en-GB');\nvar localizer = BigCalendar.momentLocalizer(moment); // or globalizeLocalizer\n\nvar MyCalendar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyCalendar, _Component);\n\n  function MyCalendar(props) {\n    var _this;\n\n    _classCallCheck(this, MyCalendar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyCalendar).call(this, props));\n\n    _this.toggle = function (n) {\n      _this.setState({\n        clicked: n\n      });\n    };\n\n    _this.handleSelectSlot = function (slotInfo) {\n      _this.setState({\n        idToUpdate: _this.getID(slotInfo.title)\n      });\n\n      _this.setState({\n        nameToUpdate: slotInfo.title\n      });\n\n      !_this.state.clicked ? _this.setState({\n        clicked: true\n      }) : _this.setState({\n        clicked: false\n      });\n    };\n\n    _this.renderBigCalendar = function () {\n      return React.createElement(BigCalendar, {\n        selectable: true,\n        onSelectEvent: function onSelectEvent(slotInfo) {\n          return _this.handleSelectSlot(slotInfo);\n        } //user clicks on existing event\n        ,\n        localizer: localizer,\n        events: _this.state.myEventsList //shows the events created\n        ,\n        step: 60,\n        views: ['month', 'week', 'day'] //view by month,week,day\n        ,\n        min: new Date(2019, 3, 1, 8) // 8.00 AM\n        ,\n        max: new Date(2019, 3, 1, 20) // Max will be 8 pm\n        ,\n        defaultDate: new Date() //make the current date today\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n    };\n\n    _this.renderModal = function () {\n      return (//pass props to child\n        React.createElement(MyModal, {\n          toggle: _this.state.clicked,\n          onToggle: _this.toggle,\n          onUpdate: _this.update,\n          index: _this.state.idToUpdate,\n          selectedName: _this.state.nameToUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        })\n      );\n    };\n\n    _this.state = {\n      nameToUpdate: 'Event Name',\n      idToUpdate: '',\n      clicked: false,\n      myEventsList: [{\n        'title': 'testing',\n        'start': new Date(2019, 3, 9),\n        'end': new Date(2019, 3, 9)\n      }],\n      todaysEvents: [],\n      userName: '',\n      email: ''\n    };\n    _this.handleSelectSlot = _this.handleSelectSlot.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.update = _this.update.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.add = _this.add.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getID = _this.getID.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.convertToCalendarFormat = _this.convertToCalendarFormat.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MyCalendar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //Get all of the needed data from the DB\n      fetch('/api/display-events-for-user').then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        return _this2.setState({\n          myEventsList: _this2.convertToCalendarFormat(res.data),\n          todaysEvents: res.todaysEvents,\n          userName: res.name[0].user_name,\n          email: res.email[0].user_email\n        });\n      }).then(function () {\n        return _this2.props.setName(_this2.state.userName);\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    } //toggling for the modal\n\n  }, {\n    key: \"update\",\n    //updating the event given the start,end, and name of event\n    value: function update(updatedEvents, updatedTodaysEvents) {\n      console.log(\"updated\");\n      console.log(\"new event list is: \", updatedEvents);\n      this.setState({\n        myEventsList: updatedEvents,\n        todaysEvents: updatedTodaysEvents\n      });\n    } //updatng state\n\n  }, {\n    key: \"add\",\n    value: function add(newEvent, updatedTodaysEvents) {\n      console.log(\"new event List is is: \", newEvent);\n      this.setState({\n        myEventsList: newEvent,\n        todaysEvents: updatedTodaysEvents\n      });\n    } //our own method to get the event_id of a selected event\n\n  }, {\n    key: \"getID\",\n    value: function getID(indexToFind) {\n      var index;\n      this.state.myEventsList.forEach(function (i) {\n        if (i.title === indexToFind) {\n          index = i.id;\n        }\n      });\n      console.log(index);\n      if (typeof index !== \"undefined\") return index;else return -1;\n    } //edit/delete existing data\n    //pass the name of the current event up to the parent so it can pass\n    //it down to the task module child via props\n    //get the selected id so we can edit or delete it\n\n  }, {\n    key: \"convertToCalendarFormat\",\n    //convert the events\n    value: function convertToCalendarFormat(a) {\n      console.table(a);\n      var eventList = [];\n      a.forEach(function (i) {\n        eventList.push({\n          'title': i.event_name,\n          'start': new Date(i.event_start_time),\n          'end': new Date(i.event_end_time),\n          id: i.event_id\n        });\n      });\n      console.table(eventList);\n      return eventList;\n    } //this will render the calendat to the screen\n    //used props to get parent state\n\n  }, {\n    key: \"renderAddEvent\",\n    value: function renderAddEvent() {\n      return React.createElement(AddEventModal, {\n        onAddEvent: this.add,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderReminder\",\n    value: function renderReminder() {\n      return React.createElement(SetReminderModal, {\n        email: this.state.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderTodaysEvents\",\n    value: function renderTodaysEvents() {\n      console.table(this.state.todaysEvents);\n      return React.createElement(DayEvents, {\n        eventList: this.state.todaysEvents,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderWeatherModule\",\n    value: function renderWeatherModule() {\n      return React.createElement(WeatherModule, {\n        eventName: this.state.nameToUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //render the modal if its clicked\n      if (this.state.clicked) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, this.renderAddEvent(), this.renderReminder(), this.renderModal(), React.createElement(\"div\", {\n          id: \"other-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"weatherToday\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, this.renderWeatherModule()), React.createElement(\"div\", {\n          id: \"todayEvents\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, this.renderTodaysEvents())), React.createElement(\"div\", {\n          id: \"calendar-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"calendar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, this.renderBigCalendar())));\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.renderAddEvent(), this.renderReminder(), React.createElement(\"div\", {\n        id: \"other-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"weatherToday\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.renderWeatherModule()), React.createElement(\"div\", {\n        id: \"todayEvents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.renderTodaysEvents())), React.createElement(\"div\", {\n        id: \"calendar-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"calendar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, this.renderBigCalendar())));\n    }\n  }]);\n\n  return MyCalendar;\n}(Component);\n\nexport default MyCalendar;","map":{"version":3,"sources":["/Users/brookestevens/Documents/GitHub/Project-Code-Components/frontend/src/calendar.js"],"names":["React","Component","BigCalendar","moment","MyModal","AddEventModal","SetReminderModal","DayEvents","WeatherModule","locale","localizer","momentLocalizer","MyCalendar","props","toggle","n","setState","clicked","handleSelectSlot","slotInfo","idToUpdate","getID","title","nameToUpdate","state","renderBigCalendar","myEventsList","Date","renderModal","update","todaysEvents","userName","email","bind","add","convertToCalendarFormat","fetch","then","res","json","data","name","user_name","user_email","setName","catch","err","console","log","updatedEvents","updatedTodaysEvents","newEvent","indexToFind","index","forEach","i","id","a","table","eventList","push","event_name","event_start_time","event_end_time","event_id","renderAddEvent","renderReminder","renderWeatherModule","renderTodaysEvents"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////\n//\n//  This is the main component that renders all of the others\n//  has the calendar in it\n//  weather and today's events are children\n//\n//\n///////////////////////////////////////////////// \n\nimport React, { Component } from 'react'\nimport './index.css';\nimport './dark.css';\n\n//use big calendar react package and custom CSS file\nimport BigCalendar from 'react-big-calendar'\nimport moment from 'moment'\nimport './react-big-calendar.css';\n\n//import the pop up modals\nimport MyModal from './popUpModal';\nimport {AddEventModal,SetReminderModal} from './addEventModal';\n\n\n//import todays events\nimport DayEvents from './todayEvents';\n\n//import the progress module\nimport WeatherModule from './weatherModule';\n\n// Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\nmoment.locale('en-GB');\nconst localizer = BigCalendar.momentLocalizer(moment); // or globalizeLocalizer\n\nclass MyCalendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nameToUpdate: 'Event Name',\n      idToUpdate: '',\n      clicked: false,\n      myEventsList: [{\n        'title' : 'testing',\n        'start' : new Date(2019, 3, 9),\n        'end' : new Date(2019, 3, 9)\n      }],\n      todaysEvents:[],\n      userName : '',\n      email: ''\n    }\n    this.handleSelectSlot = this.handleSelectSlot.bind(this);\n    this.update = this.update.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.add = this.add.bind(this);\n    this.getID = this.getID.bind(this);\n    this.convertToCalendarFormat = this.convertToCalendarFormat.bind(this);\n  }\n\n  componentDidMount() {\n    //Get all of the needed data from the DB\n    fetch('/api/display-events-for-user')\n    .then(res => res.json())\n    .then(res =>\n      this.setState({\n        myEventsList : this.convertToCalendarFormat(res.data),\n        todaysEvents : res.todaysEvents,\n        userName : res.name[0].user_name,\n        email: res.email[0].user_email\n    }))\n    .then (() => this.props.setName(this.state.userName))\n    .catch(err => console.log(err));\n  }\n\n  //toggling for the modal\n  toggle = (n) => {\n    this.setState({ clicked: n });\n  }\n\n  //updating the event given the start,end, and name of event\n  update(updatedEvents, updatedTodaysEvents) {\n    console.log(\"updated\");\n    console.log(\"new event list is: \", updatedEvents);\n    this.setState({ myEventsList: updatedEvents, todaysEvents: updatedTodaysEvents });\n  }\n\n  //updatng state\n  add(newEvent, updatedTodaysEvents) {\n    console.log(\"new event List is is: \", newEvent);\n    this.setState({\n      myEventsList: newEvent,\n      todaysEvents : updatedTodaysEvents \n    });\n  }\n\n  //our own method to get the event_id of a selected event\n  getID(indexToFind) {\n    var index;\n    this.state.myEventsList.forEach( i => {\n      if(i.title === indexToFind){\n        index = i.id;\n      }\n    });\n    console.log(index);\n    if (typeof index !== \"undefined\") return index;\n    else return -1;\n  }\n\n  //edit/delete existing data\n  //pass the name of the current event up to the parent so it can pass\n  //it down to the task module child via props\n  //get the selected id so we can edit or delete it\n  handleSelectSlot = (slotInfo) => {\n    this.setState({idToUpdate : this.getID(slotInfo.title)});\n    this.setState({nameToUpdate: slotInfo.title});\n    !this.state.clicked ? this.setState({ clicked: true }) : this.setState({ clicked: false });\n  }\n\n  //convert the events\n  convertToCalendarFormat(a){\n    console.table(a);\n    var eventList = [];\n    a.forEach( i => {\n      eventList.push({\n        'title' : i.event_name,\n        'start' : new Date(i.event_start_time),\n        'end' : new Date(i.event_end_time),\n        id : i.event_id\n      })\n    })\n    console.table(eventList);\n    return eventList;\n  }\n\n  //this will render the calendat to the screen\n  //used props to get parent state\n  renderBigCalendar = () => {\n    return (\n      <BigCalendar\n        selectable={true}\n        onSelectEvent={slotInfo => this.handleSelectSlot(slotInfo)} //user clicks on existing event\n        localizer={localizer}\n        events={this.state.myEventsList} //shows the events created\n        step={60}\n        views={['month', 'week', 'day']} //view by month,week,day\n        min={new Date(2019, 3, 1, 8)} // 8.00 AM\n        max={new Date(2019, 3, 1, 20)} // Max will be 8 pm\n        defaultDate={new Date()} //make the current date today\n      />\n    );\n  }\n\n  //send in all of the props to the popUpModal Component\n  //need index from the object clicked on\n  renderModal = () => {\n    return (\n      //pass props to child\n      <MyModal toggle={this.state.clicked}\n        onToggle={this.toggle}\n        onUpdate={this.update}\n        index = {this.state.idToUpdate}\n        selectedName = {this.state.nameToUpdate}\n      />\n    );\n  }\n\n  renderAddEvent() {\n    return (\n      <AddEventModal onAddEvent={this.add} />\n    )\n  }\n\n  renderReminder() {\n    return (\n      <SetReminderModal email = {this.state.email} />\n    )\n  }\n\n  renderTodaysEvents(){\n    console.table(this.state.todaysEvents);\n    return(\n      <DayEvents eventList = {this.state.todaysEvents} />\n    )\n  }\n\n  renderWeatherModule(){\n    return(\n      <WeatherModule eventName = {this.state.nameToUpdate} />\n    );\n  }\n\n  render() {\n    //render the modal if its clicked\n    if (this.state.clicked) {\n      return (\n        <React.Fragment>\n          {this.renderAddEvent()}\n          {this.renderReminder()}\n          {this.renderModal()}\n          <div id=\"other-content\">\n            <div id=\"weatherToday\">\n              {this.renderWeatherModule()}\n            </div>\n            <div id=\"todayEvents\">\n              {this.renderTodaysEvents()}\n            </div>\n          </div>\n          <div id=\"calendar-wrapper\">\n            <div id=\"calendar\">\n              {this.renderBigCalendar()}\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n    return (\n      <React.Fragment>\n        {this.renderAddEvent()}\n        {this.renderReminder()}\n        <div id=\"other-content\">\n          <div id=\"weatherToday\">\n            {this.renderWeatherModule()}\n          </div>\n          <div id=\"todayEvents\">\n            {this.renderTodaysEvents()}\n          </div>\n        </div>\n        <div id=\"calendar-wrapper\">\n          <div id=\"calendar\">\n            {this.renderBigCalendar()}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}